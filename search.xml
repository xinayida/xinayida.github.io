<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Gradle编译依赖冲突问题（AGPBI）]]></title>
    <url>%2F2018%2F11%2F30%2Fissue%2F</url>
    <content type="text"><![CDATA[在出现依赖的库版本不一致的情况时，gradle会默认使用新版本覆盖旧版本，通常不需要手动去解决。那么出现冲突一般为当前工程的某个直接引用的库版本，低于依赖库/工程中依赖树的版本 将依赖关系打印到日志文件中： ./gradlew -q app:dependencies &gt; dependencies.txt 试着将冲突的]]></content>
  </entry>
  <entry>
    <title><![CDATA[局域网wifi环境Android摄像实时互传]]></title>
    <url>%2F2018%2F11%2F12%2F%E5%B1%80%E5%9F%9F%E7%BD%91wifi%E7%8E%AF%E5%A2%83Android%E6%91%84%E5%83%8F%E5%AE%9E%E6%97%B6%E4%BA%92%E4%BC%A0%2F</url>
    <content type="text"><![CDATA[简介 最近，项目中需要实现这样一个需求，局域网内两台设备，一台通过摄像头录像，并实时传输到另一台设备上显示，要求延迟在1秒之内。 调研了一下局域网内视频传输的东西，网上找了一些相关项目，找到的最接近需求的是Endoscope，只不过这个实现会有4-5秒的延迟，造成延迟的主要原因在于他是在录制端开启了一个rtsp服务： StartStreamPresenter.java 12345private void startRtspServer() &#123; rtspServer = new RtspServer(); rtspServer.addCallbackListener(this); rtspServer.start(); &#125; 显示端使用Android原生MediaPlayer去链接视屏源并播放： PlayerStreamActivity.java 1mediaPlayer.setDataSource(this, videoUri); 通过调试发现视屏发送端在有客户端链接后，立即开始录制并输出视屏数据，怀疑是MediaPlayer的缓存机制导致了视频不同步的问题。 因此，在此基础上： 我将视频传输协议改为tcp，发送的数据事先做了转换NV21-&gt;YUV420,并矫正了90度旋转（为了竖屏正常显示，摄像头需要设置为顺时针旋转90度) 接收端改为通过硬件解码将视频数据包解析并渲染到SurfaceView上 ########################################## 另，在网上看到很多实现方式是通过将每帧数据压缩为Jpeg格式之后传输、显示，这里我也将这种方式实现了一下，通过对比发现效果很不理想，可以通过修改DetectConst.TRANS_MODE来切换测试 源码：https://github.com/xinayida/LiveVideo]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>ffmpeg</tag>
        <tag>live</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[译]Epoxy:Airbnb的安卓视图架构]]></title>
    <url>%2F2018%2F06%2F19%2FEpoxy-Airbnb%E7%9A%84%E5%AE%89%E5%8D%93%E8%A7%86%E5%9B%BE%E6%9E%B6%E6%9E%84%2F</url>
    <content type="text"><![CDATA[原文：link 作者：Eli Hart 项目：github.com/airbnb/epoxy 安卓的RecyclerView是一个显示列表的强大工具，但是它的使用涉及混杂的样式和设置。我们团队有个显示多样式的复杂列表的需求，要有分页、支持平板电脑显示已经item动画。我们发现一直重复同样的模板配置工作，于是我们开发了Epoxy来减缓这种趋势，并且简化静态、动态加载内容的列表类视图。 Epoxy以组件的方式来创建列表，列表中的每个item通过model来定义绘制所需的layout,id和span(间距).model还负责绑定数据到它的view上，并且在view回收时释放资源。这些model按你希望显示的顺序插入到Epoxy的adapter中，adapter来负责复杂的显示工作。 用Epoxy显示搜索结果 我们来通过一个例子来看一下它是如何工作的。这是一个Airbnb中显示城市中邻居的搜索结果页。 我们可以将这个视图拆分为: 一个城市介绍的标题栏 一个城市向导的链接 一个不定数量的城市邻居轮播图 一个某些国家会有的价格免责声明 这给了我们8(4?)种不同类型的视图，我们需要用RecyclerView来讲他们组合在一起，从而使整个页面可以完整显示并滚动。 为这样一个包含多样式的页面设置RecyclerView的adapter十分操蛋。我们将会有好多乱七八糟的东西：视图类型id，item数量，间距值，view holder，点击事件处理等等。 使用Epoxy的组件方式可以将注意力集中于item需要显示什么，显示适配工作将交由models代理完成。 大概这个样： 1234567891011public class SearchAdapter extends EpoxyAdapter &#123; public void bindSearchData(SearchData data) &#123; header.setCity(data.city); guidebookRow.showIf(data.hasGuideBook()); for (Neighborhood neighborhood : data.neighborhoods) &#123; addModel(new NeighborhoodCarouselModel(neighborhood)); &#125; loader.showIf(data.hasMoreToLoad()); notifyModelsChanged(); &#125;&#125; bindSearchData方法接受一个object类型对象，其中包含了view所需的所有信息。它是幂等的（相同参数多次执行结果相同），当条件发生变化它将重新创建model state来反映新的搜索结果。最后一行，我们告诉Epoxy去执行diff操作，当数据发生变化时将通知到RecyclerView上。 这和React的组件UI非常类似。代码只需描述什么需要被显示，adapter来负责具体的显示工作。我们不需要挨个定义ids，counts，holders等。另外，我们也不需要去处理变化通知的工作。 这使得其成为一个加载多数据源（数据库，缓存，网络请求）的非常优秀的框架。它在adapter中记录一个状态对象，adapter创建models来反映当前状态。当状态对象发生变化时，不论是用户输入或者新数据加载导致的，新的状态将传递给adapter，然后models会再次更新。点击事件可以在model中设置，来回调到Activity。 这种方式职责分离很清晰。models可以根据需求很简单的引入或剔除。通过组件以及adapter的抽象封装。 通常频繁的item变化会十分影响效率，然而，Epoxy加入了一个相当牛逼的算法来检测models的变化，只有在models真正变化时才更新UI（需要确认和google原生DiffUtil的关系） 检测adapter item的变化 一般的adapter中另一个复杂点是跟踪item的变化。item有可能被添加、删除、更新、移动，adapter需要根据这些不同类型的通知去执行相应的处理。这些通知使得RecyclerView可以只重绘变化的views，以及执行相应的动画效果。然而，在已经非常复杂的adapter中手动处理这些问题会十分困难。 Epoxy在models上使用了比对算法来帮你解决这类问题。任何时候当你改变model设置，Epoxy将找出这些变化并反映到RecyclerView上。这将简化你的adapter代码，很容易的添加item变化的动画效果，并且通过只改变需要改变的views来提高性能。 比对算法根据每个model实现的哈希值，所以可以侦测到model的改变，Epoxy提供了注解的方式，所以你的model可以很简单的通过注解来标注需要被考虑进model状态变化的字段。自动生成的子类会帮你实现hashcode计算函数以及各字段的getter和setter。 继续我们上面的例子，header model大概长这样： 123456789101112131415public class HeaderModel extends EpoxyModel&lt;HeaderView&gt; &#123; @EpoxyAttribute City city; @Override public void bind(HeaderView headerView)&#123; headerView.setImage(city.getImage()); headerView.setTitle(city.getName()); headerView.setDescription(city.getDescription()); &#125; @LayoutRes public int getDefaultLayout() &#123; return R.layout.model_header_view; &#125;&#125; 一个HeaderModel_类会被自动生成，并且包含setCity方法，我们就用这个实例来向models列表中添加一个头部。头部视图只会在city对象变化时刷新。这里假设City对象也有一个hashCode的实现来定义它的状态变化。 你可能注意到了，getDefaultLayout()方法返回了一个layout资源。这个就是用来绑定数据的视图资源，同时这个值也被用作adapter中的视图类型。 稳定的默认IDs 为了在Epoxy中正确实现RecyclerView的默认ids，并由此来实现比对方法，item动画以及状态保持。每一个model都需要定义它的id，我们手动在动态生成的model里设置了一个id。例如，每一个邻居轮播图model的id与网络请求返回的邻居对象相关联。 静态视图，例如我们的头部视图，没有与之关联的id，所以我们得造一个出来。Epoxy会为每一个新创建的model自动生成一个id，并且这个id在app生命周期中确保唯一，负值的id用来避免和手动设置的id相冲突。 唯一需要注意的是，我们必须在adapter生命周期中使用同一个model。对于头部视图（或其他静态视图）这就代表我们定义了一个final类型的字段，并在内联方法中将其初始化。然后将其加入model列表并且像通常一样去更新。我们不必再去做更多工作来保证其唯一。 保存视图状态 Epoxy也加入了对视图列表的状态支持，RecyclerView默认并不支持。例如，上图中的轮播图可以左右滑动，为了更好的用户体验，我们希望保存其滑动位置。当用户往下滑动然后再返回时，轮播图应该停在之前相同的位置，同样当用户旋转屏幕或者切换到其他app再切换回来，尽管Activity已经重新创建，我们也应该展现相同的页面状态。 在一般的RecyclerView adapter中实现要费了老劲了，然而，Epoxy直接就支持，啥model都能保存状态。它是通过leveraging stable ids将model id与视图的序列化状态相关联来实现的。 使用也很简单： @Override public boolean shouldSaveViewState { return true; } 默认状态为false，来减少对性能的影响。 Epoxy关于静态内容的使用 RecyclerView经常被用来显示远程加载的动态内容。其他的内容一般用Scrollview来实现，使用Epoxy可以在不用做过多工作的情况下使用RecyclerView来替换Scrollview。下面的列表就是这么用的： 使用ScrollView实现最为简单，但是使用Epoxy的RecyclerView可以有更快的加载速度，添加动画效果也更简单。 这个页面的性能问题非常重要，因为用户点击搜索结果时就会跳转到这个页面，让这个过渡动画效果平滑是提升用户搜索体验的重要因素，同时还需要详情页加载非常快才行。 让我们来看一下详情页上的元素是如何影响性能的。首先，头部的照片是一个横向的RecyclerView，中间有一个静态地图显示地理位置，底部还有一个横向RecyclerView显示附近类似房子，中间还有一些描述性文字和小图片。 整体上构成了一个十分复杂的视图结构，包含了很多bitmaps。这使得测量和展现时间变得很长，并且需要更多的内存去加载图片。 另外，我们通过多种渠道加载数据——数据库，内存缓存，多个网络请求——来支撑这个页面，这对向用户显示即时信息很有帮助，但如果处理不好则需要花费额外的时间去更新视图。 综上所述，我们必须要关心效率问题。谢天谢地有了Epoxy！让我们有了极致的用户体验！！（妈了个鸡。。。我为啥要翻译这个。。。） 因为使用了RecyclerView，当用户首次加载时，只有一小部分视图需要加载。这避免了过早加载地图视图和底部的轮播图，以及中间的那些玩意儿。于是有了更快的加载速度，更小的内存使用，以及最为关键的梗平滑的过渡效果。 防止了上下滑动时视图结构失效引起的帧率下降，假如有数据返回但对应的view不在屏幕上，我们都不用管。如果时间字段变化导致价格需要更新，Epoxy会自动更新价格。 item变化动画效果。数据变化时我们可以用平滑的动画效果来隐藏、显示或更新视图。例如，点击翻译会插入一个loader动画，当翻译完成时会自动变为翻译后的结果，避免了默认的不自然的变化效果。 Epoxy的未来 开源了, 欢迎贡献~我们会持续改进注解处理，对比算法，以及工具类。欢迎引入其他牛逼的库。 Check out all of our open source projects over at airbnb.io and follow us on Twitter: @AirbnbEng + @AirbnbData]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>recyclerview</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ffmpeg编译]]></title>
    <url>%2F2018%2F05%2F23%2Fffmpeg%E7%BC%96%E8%AF%91%2F</url>
    <content type="text"><![CDATA[1.Download 下载ndk： https://developer.android.google.cn/ndk/downloads/ 下载ffmpeg: http://ffmpeg.org/download.html#releases 2.Config ./configure 12345678910111213SLIBNAME_WITH_VERSION=&apos;$(SLIBNAME).$(LIBVERSION)&apos;# SLIBNAME_WITH_MAJOR=&apos;$(SLIBNAME).$(LIBMAJOR)&apos;SLIBNAME_WITH_MAJOR=&apos;$(SLIBPREF)$(FULLNAME)-$(LIBMAJOR)$(SLIBSUF)&apos; LIB_INSTALL_EXTRA_CMD=&apos;$$(RANLIB) &quot;$(LIBDIR)/$(LIBNAME)&quot;&apos;# SLIB_INSTALL_NAME=&apos;$(SLIBNAME_WITH_VERSION)&apos;SLIB_INSTALL_NAME=&apos;$(SLIBNAME_WITH_MAJOR)&apos;# SLIB_INSTALL_LINKS=&apos;$(SLIBNAME_WITH_MAJOR) $(SLIBNAME)&apos;SLIB_INSTALL_LINKS=&apos;$(SLIBNAME)&apos;``` add build_android.sh chmod +x build_android.shopen and edit:]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring搭建微信后台]]></title>
    <url>%2F2018%2F05%2F17%2FSpring%E6%90%AD%E5%BB%BA%E5%BE%AE%E4%BF%A1%E5%90%8E%E5%8F%B0%2F</url>
    <content type="text"><![CDATA[配置Mybatis http://www.mybatis.org/spring/mappers.html#scan http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>wechat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo和Next主题如何使用]]></title>
    <url>%2F2018%2F05%2F09%2FHexo%E5%92%8CNext%E4%B8%BB%E9%A2%98%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[如何使用 Hexo 和 GitHub Pages 搭建这个博客 Next主题(Hexo)]]></content>
  </entry>
  <entry>
    <title><![CDATA[Spring notes]]></title>
    <url>%2F2018%2F05%2F09%2FSpring-notes%2F</url>
    <content type="text"><![CDATA[javax.annotation.Resource和@Autowired区别 @Resource和@Autowired两者都是做bean的注入使用。 其实@Resource并不是Spring的注解，他的包是javax.annotation.Resource 需要导入。但是Spring支持该注解的注入。 共同点：两者都可以写在字段和setter方法上。两者如果都写在字段上，就不需要写写setter方法。 @Autowired @Autowired为Spring提供的注解， 需导入Package:org.springframework.beans.factory.annotation.Autowired; 只按照byType 注入。 1234567@Autowired private UserDao userDao;//用于字段上@Autowiredpublic void setUserDao(UserDao userDao) &#123;//用于属性的setter方法上 this.userDao= userDao;&#125; @Autowired注解是按类型装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它required属性为false。 如果想使用按名称装配，可以结合@Qualifier注解一起使用。 12@Autowired @Qualifier(&quot;userDao&quot;)private PersonDao personDao; @Resource @Resource默认按 byName 自动注入,由J2EE提供。 需导入Package: javax.annotation.Resource @Resource有两个中重要的属性：name和type ，而Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用 byType自动注入策略。如果既不指定name也不指定type属性，这时将通过反射机制使用byName自动注入策略。 @Resource装配顺序 (1). 如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常; (2). 如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常; (3). 如果指定了type，则从上下文中找到类型匹配的唯一bean进行装配，找不到或者找到多个，都会抛出异常; (4). 如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配； 总结 @Autowired按byType自动注入，@Resource默认按byName自动注入 一般使用@Resource，从而实现和Spring框架解耦合 转自： Link]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Go 基础知识]]></title>
    <url>%2F2018%2F05%2F09%2Fgo_notes%2F</url>
    <content type="text"><![CDATA[值： 123456789101112131415package mainimport &quot;fmt&quot;func main() &#123; // 字符串可以通过 + 连接。 fmt.Println(&quot;go&quot; + &quot;lang&quot;) // 整数和浮点数 fmt.Println(&quot;1+1 =&quot;, 1+1) fmt.Println(&quot;7.0/3.0 =&quot;, 7.0/3.0) // 布尔型，还有你想要的逻辑运算符。 fmt.Println(true &amp;&amp; false) fmt.Println(true || false) fmt.Println(!true)&#125; 123456golang1+1 = 27.0/3.0 = 2.3333333333333335falsetruefalse 变量 var声明1个或多个变量 12var a string = &quot;initial&quot;var b, c int = 1, 2 自动推断已经初始化的变量类型 var b = true 声明变量初始值为零值 := 为初始化变量的简写 常量 const用于声明一个常量。 1234567891011121314151617181920212223242526272829// Go 支持字符、字符串、布尔和数值 _常量_ 。package mainimport &quot;fmt&quot;import &quot;math&quot;// `const` 用于声明一个常量。const s string = &quot;constant&quot;func main() &#123; fmt.Println(s) // `const` 语句可以出现在任何 `var` 语句可以出现 // 的地方 const n = 500000000 // 常数表达式可以执行任意精度的运算 const d = 3e20 / n fmt.Println(d) // 数值型常量是没有确定的类型的，直到它们被给定了一个 // 类型，比如说一次显示的类型转化。 fmt.Println(int64(d)) // 当上下文需要时，一个数可以被给定一个类型，比如 // 变量赋值或者函数调用。举个例子，这里的 `math.Sin` // 函数需要一个 `float64` 的参数。 fmt.Println(math.Sin(n))&#125; 1234constant6e+11600000000000-0.28470407323754404 类型转换 1234var a = &quot;12112133.5123123&quot;var b, _ = strconv.ParseFloat(a, 64)var c = &quot;123123&quot;var d, _ = strconv.ParseInt(a, 10, 64) 循环 12345678910111213141516171819202122232425262728// `for` 是 Go 中唯一的循环结构。这里有 `for` 循环// 的三个基本使用方式。package mainimport &quot;fmt&quot;func main() &#123; // 最常用的方式，带单个循环条件。 i := 1 for i &lt;= 3 &#123; fmt.Println(i) i = i + 1 &#125; // 经典的初始化/条件/后续形式 `for` 循环。 for j := 7; j &lt;= 9; j++ &#123; fmt.Println(j) &#125; // 不带条件的 `for` 循环将一直执行，直到在循环体内使用 // 了 `break` 或者 `return` 来跳出循环。 for &#123; fmt.Println(&quot;loop&quot;) break &#125;&#125; if/else 分支 1234567891011121314151617181920212223242526272829303132// `if` 和 `else` 分支结构在 Go 中当然是直接了当的了。package mainimport &quot;fmt&quot;func main() &#123; // 这里是一个基本的例子。 if 7%2 == 0 &#123; fmt.Println(&quot;7 is even&quot;) &#125; else &#123; fmt.Println(&quot;7 is odd&quot;) &#125; // 你可以不要 `else` 只用 `if` 语句。 if 8%4 == 0 &#123; fmt.Println(&quot;8 is divisible by 4&quot;) &#125; // 在条件语句之前可以有一个语句；任何在这里声明的变量 // 都可以在所有的条件分支中使用。 if num := 9; num &lt; 0 &#123; fmt.Println(num, &quot;is negative&quot;) &#125; else if num &lt; 10 &#123; fmt.Println(num, &quot;has 1 digit&quot;) &#125; else &#123; fmt.Println(num, &quot;has multiple digits&quot;) &#125;&#125;// 注意，在 Go 中，你可以不适用圆括号，但是花括号是需要的。 分支结构 switch 一个case中可以用逗号分隔多个表达式 123456switch time.Now().Weekday() &#123; case time.Saturday, time.Sunday: fmt.Println("it's the weekend") default: fmt.Println("it's a weekday") &#125; 可以不带表达式 1234567t := time.Now()switch &#123; case t.Hour() &lt; 12: fmt.Println("it's before noon") default: fmt.Println("it's after noon")&#125; 数组 12345678910111213141516171819202122package mainimport "fmt"func mann()&#123; //默认值都为0，长度为5的数组 var a [5]int fmt.Println("emp:", a) a[4] = 100 fmt.Println("set:", a) fmt.Println("get:", a[4]) //内置函数返回数组长度 fmt.Println("len:", len(a)) b := [5]int&#123;1,2,3,4,5&#125; fmt.Println("dcl:", b) var twoD [2][3]int for i := 0; i &lt; 2; i++ &#123; for j:= 0; j &lt; 3; j++ &#123; twoD[i][j] = i + j &#125; &#125; fmt.Println("2d: ", twoD)&#125; 切片 关联数组 运行：go run 编译：go build 网络框架: gin]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>gin</tag>
      </tags>
  </entry>
</search>
